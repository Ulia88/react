{"version":3,"sources":["cra9/Form.js","cra9/ToDoListItem.js","cra9/List.js","cra9/App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","inputValue","setInputValue","value","onChange","e","console","log","target","type","onClick","create","class","ToDoListItem","todo","doneButton","unMark","remove","edit","isTodoDone","done","toDoTitle","title","todoId","id","titleStyle","textDecorationLine","isEditMode","setIsEditMode","updateToDo","setUpdateToDo","className","style","List","list","map","el","key","initialList","App","setList","newItem","Math","random","updatedList","newList","unCheck","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c54020e.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction Form(props) {\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const inputOnChange = e => {\n        console.log(e)\n        setInputValue(e.target.value)               // e.target дает возможность вытащить то что мы напечатали в input\n    };\n\n    const onCreateEmpty = () => {                   //вызывает функцию креейт и очищает инпут\n        props.create(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <div>\n            To do Create Form\n\n            <input value={inputValue} onChange={inputOnChange} type=\"text\"/>\n\n            <button onClick={onCreateEmpty} class=\"btn btn-warning\">Create</button>\n\n        </div>\n    );\n}\n\nexport default Form;\n","import React, {useState} from 'react';\n\n\nfunction ToDoListItem(props) {\n\n    const {todo, doneButton, unMark, remove, edit} = props\n\n    const isTodoDone = todo.done\n    const toDoTitle = todo.title\n    const todoId = todo.id\n    const titleStyle = isTodoDone === true ? {textDecorationLine: 'line-through'} : {};              //ccs.styles\n\n    const [isEditMode, setIsEditMode] = useState(false)\n    const [updateToDo, setUpdateToDo] = useState(toDoTitle)\n\n\n    const inputHandler = (e) => {\n        setUpdateToDo(e.target.value)\n    }\n\n    const saveButtonHandler = () => {\n        edit(todoId, updateToDo)\n        setIsEditMode(false)\n    };\n\nreturn (\n    <div>\n        {\n            isEditMode ? (\n\n                <div>\n                    <input onChange={inputHandler} value={updateToDo} />\n                    <button onClick={saveButtonHandler}>Save</button>\n\n                </div>\n            ) : (\n                <div>\n                    {\n                        isTodoDone ? (\n                        <div>\n                            <span className=\"title\"  style={titleStyle}>{toDoTitle}</span>\n                            <button onClick={() => unMark(todoId)}> Unmark</button>\n                            <button onClick={() => remove(todoId)}> X</button>\n                            <button onClick={() => setIsEditMode(true)}> Edit</button>\n                        </div>\n                    ) : (\n                        <div>\n                            <span className=\"title\" style={titleStyle}>{toDoTitle}</span>\n                            <button onClick={() => doneButton(todoId)}> Done </button>\n                            <button onClick={() => setIsEditMode(true)}> Edit</button>\n                            <button onClick={() => remove(todoId)}> X</button>\n\n                        </div>)\n                    }\n\n                 </div>\n            )}\n\n    </div>\n\n  );\n}\n\n        export default ToDoListItem;\n","import React from 'react';\nimport ToDoListItem from \"./ToDoListItem\";\n\n\n\nfunction List(props) {\n\n const {doneButton, unMark, list, remove, edit} = props\n\n  return (\n    <div>\n      To do list\n\n      {list.map(el => <ToDoListItem\n          todo ={el}\n          key={el.id}\n          doneButton ={doneButton}\n          unMark={unMark}\n          remove={remove}\n          edit={edit}/>)}\n\n    </div>\n  );\n}\n\nexport default List;\n","import React, {useState} from 'react';\nimport Form from './Form';\nimport List from './List';\nimport './App.css';\n\n\nconst initialList = [\n    {id: 1, title: 'firstToDo', done: false},   // несделанный айтем\n    {id: 2, title: 'secondToDo', done: false},\n    {id: 3, title: 'thirdToDo', done: false},\n]\n\nfunction App() {\n    const [list, setList] = useState(initialList);\n\n    const create = title => {                   //принимает тайтл\n        const newItem = {\n            id: Math.random() * 10,\n            title,                              //same as title: title\n            done: false,\n        }\n\n        const updatedList = [...list, newItem];\n        setList(updatedList);\n    }\n\n\n    const doneButton = (todoId) => {\n        const newList = [...list].map(el => {\n            if (el.id === todoId) return {...el, done: true}\n            return el\n        })\n        setList(newList)\n    };\n    const unMark = (todoId) => {\n        const unCheck = [...list].map(el => {\n            if (el.id === todoId) return {...el, done: false}\n            return el\n        })\n        setList(unCheck)\n    };\n    const remove = (todoId) => {\n        const newList = list.filter(el => el.id !== todoId) //выведи нам массив элемента без ид на который мы нажали\n        setList(newList)\n\n    };\n\n    const edit = (todoId, title) => {                         //вешаем получает арг todoId и новый title\n        const newList = list.map(el => {                     //метод мэп создает новый массив\n            if (el.id === todoId) return {...el, title}     // внутри мэп мы передаем аноним функцию которая сравнит по ид и вернет новый тайтл\n            return el\n        })\n            setList(newList)\n    };\n\n    return (\n        <div>\n\n            <Form create={create}/>\n            <List list={list} doneButton={doneButton} unMark={unMark} remove={remove} edit={edit}/>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './cra9/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}