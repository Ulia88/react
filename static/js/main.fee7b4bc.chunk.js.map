{"version":3,"sources":["homework7/Counter.js","homework7/App.js","serviceWorker.js","index.js"],"names":["btn","color","fontSize","background","marginTop","backgroundImage","borderRadius","Counter","props","onClick","plus","index","style","count","minus","reset","deleteRow","btnApp","App","useState","counters","setCounters","plusOne","console","log","plusAdded","minusOne","minusAdded","resetOne","resetCurrent","deleteOneRow","filter","el","i","align","map","key","r","Math","round","random","letReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6LACMA,EAAM,CACRC,MAAO,QACPC,SAAU,OACVC,WAAY,OACZC,UAAW,OACXC,gBAAiB,kCACjBC,aAAc,OAsBHC,MAnBf,SAAiBC,GAGb,OAEI,6BAEI,4BAAQC,QAAS,kBAAMD,EAAME,KAAKF,EAAMG,QAAQC,MAAOZ,GAAvD,MACCQ,EAAMK,MACP,4BAAQJ,QAAS,kBAAMD,EAAMM,MAAMN,EAAMG,QAAQC,MAAOZ,GAAxD,MACA,4BAAQS,QAAS,kBAAMD,EAAMO,MAAMP,EAAMG,QAAQC,MAAOZ,GAAxD,UACA,4BAAQS,QAAS,kBAAMD,EAAMQ,UAAUR,EAAMG,QAAQC,MAAOZ,GAA5D,aClBNiB,EAAS,CACXhB,MAAO,QACPC,SAAU,OACVG,gBAAiB,kCACjBD,UAAW,OACXE,aAAc,OAuEHY,MApEf,WAAgB,IAAD,EACqBC,mBAAS,CAAC,EAAG,GAAI,KADtC,mBACJC,EADI,KACMC,EADN,KASLC,EAAU,SAACX,GACbY,QAAQC,IAAI,UAAWb,GACvB,IAAMc,EAAS,YAAOL,GACtBK,EAAWd,KACXU,EAAYI,IAGVC,EAAW,SAACf,GACdY,QAAQC,IAAI,UAAWb,GACvB,IAAMgB,EAAU,YAAOP,GACvBO,EAAYhB,KACZU,EAAYM,IAIVC,EAAW,SAACjB,GACd,IAAMkB,EAAY,YAAOT,GACzBS,EAAalB,GAAS,EACtBU,EAAYQ,IAIVC,EAAe,SAACnB,GAClB,IAAMK,EAAYI,EAASW,QAAO,SAACC,EAAIC,GACnC,OAAOA,IAAMtB,KAEjBU,EAAYL,IAShB,OACI,yBAAKkB,MAAM,UAINd,EAASe,KAAI,SAACH,EAAIC,GAAL,OACV,kBAAC,EAAD,CAASpB,MAAOmB,EACPI,IAAKH,EACLtB,MAAOsB,EACPvB,KAAMY,EACNR,MAAOY,EACPX,MAAOa,EACPZ,UAAWc,OAIxB,4BAAQrB,QAxDG,WACf,IAAM4B,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BnB,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,MAsDOzB,MAAOK,GAApC,gBACC,4BAAQR,QAvBA,WACb,IAAMgC,EAAW,YAAIrB,GAAUe,KAAI,SAAAH,GAAE,OAAI,KACzCX,EAAYoB,IAqBoB7B,MAAOK,GAAlC,iBC5DOyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.fee7b4bc.chunk.js","sourcesContent":["import React from 'react';\nconst btn = {\n    color: 'black',\n    fontSize: '18px',\n    background: 'gold',\n    marginTop: '10px',\n    backgroundImage: 'linear-gradient(orange, yellow)',\n    borderRadius: '8px'\n}\n\nfunction Counter(props) {\n\n\n    return (\n\n        <div>\n            {/*Index: ({props.index})*/}\n            <button onClick={() => props.plus(props.index)} style={btn}> +</button>\n            {props.count}\n            <button onClick={() => props.minus(props.index)} style={btn}> -</button>\n            <button onClick={() => props.reset(props.index)} style={btn}> Reset</button>\n            <button onClick={() => props.deleteRow(props.index)} style={btn}> Delete</button>\n\n        </div>\n\n\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport Counter from './Counter';\n\nconst btnApp = {\n    color: 'black',\n    fontSize: '18px',\n    backgroundImage: 'linear-gradient(orange, yellow)',\n    marginTop: '10px',\n    borderRadius: '8px'\n}\n\nfunction App() {\n    const [counters, setCounters] = useState([4, 11, 34]);\n\n\n    const addCounter = () => {\n        const r = Math.round(Math.random() * 10);\n        setCounters([...counters, r])\n    };\n\n    const plusOne = (index) => {\n        console.log('plusOne', index);\n        const plusAdded = [...counters];\n        plusAdded [index]++;\n        setCounters(plusAdded);\n    };\n\n    const minusOne = (index) => {\n        console.log('plusOne', index);\n        const minusAdded = [...counters];\n        minusAdded [index]--;\n        setCounters(minusAdded);\n\n    };\n\n    const resetOne = (index) => {\n        const resetCurrent = [...counters];\n        resetCurrent[index] = 0;\n        setCounters(resetCurrent);\n\n    };\n\n    const deleteOneRow = (index) => {\n        const deleteRow = counters.filter((el, i) => {\n            return i !== index\n        })\n        setCounters(deleteRow);\n    }\n\n    const resetAll = () => {\n        const letReset = [...counters].map(el => 0);\n        setCounters(letReset);\n\n    }\n\n    return (\n        <div align='center'>\n            {/*<Counter count={+3}/>*/}\n            {/*<Counter count={+8}/>*/}\n\n            {counters.map((el, i) => (\n                <Counter count={el}\n                         key={i}\n                         index={i}\n                         plus={plusOne}\n                         minus={minusOne}\n                         reset={resetOne}\n                         deleteRow={deleteOneRow}\n                />\n            ))}\n\n            <button onClick={addCounter} style={btnApp}> ADD Counter</button>\n            {<button onClick={resetAll} style={btnApp}> RESET ALL </button>}\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './homework7/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}